<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="NS_save_as_HDA" label="Save As HDA" icon="hicon:/SVGIcons.index?BUTTONS_materials_unassigned.svg">
    <script scriptType="python"><![CDATA[]]></script>
  </tool>

  <tool name="NS_save_as_tutorial" label="Save As Tutorial" icon="hicon:/SVGIcons.index?BUTTONS_sync.svg">
    <script scriptType="python"><![CDATA[import os
pathfile = r'C:/Users/Natspir/NatspirProd/03_WORK_PIPE/05_Tuto' #to do : define the pipeline path in a config file. Set possibility to save in or outside the pipeline
message = "save your tutorial"
inputUser = hou.ui.readMultiInput(message,('Tuto Name','Tuto url', 'Type', 'Description'), buttons=('Cancel','OK'), default_choice=1) 
print('inputUser ='+str(inputUser[0]) )

if(inputUser[0]==1): #if the user press ok button :
    assetInfo = inputUser[1]
    print('length inputUser = '+str(len(assetInfo)))
    print('tuto name = '+assetInfo[0])
    tutoName = assetInfo[0]
    tutoType = assetInfo[2]
    if(tutoName==''): #if the name of the tuto is empty trigg error
        hou.ui.displayMessage('You must set the tuto name. scene not saved',severity=hou.severityType.Warning)
    if(tutoType==''): #if the name of the tuto is empty trigg error
        hou.ui.displayMessage('You must set the tuto type. scene not saved',severity=hou.severityType.Warning)
    else:
        #create folder with the tuto name
        #create text file with, the tuto name, the description and the url if exist
        pathfile = os.path.join(pathfile,tutoType )
        tutoDir = os.path.join(pathfile,tutoName )
        if os.path.exists(tutoDir):
            hou.ui.displayMessage('This tuto name already exist, please chose another name. scene not saved',severity=hou.severityType.Warning)
            print "ntm"
        else:
            #create the directory, the text file and save the scene
            os.makedirs(tutoDir)
            fileName = tutoDir+os.sep+tutoName
            hou.hipFile.save(fileName+'_1.hipnc')
            file = open(fileName+'.txt', 'w')
            for line in [tutoName+'\n', assetInfo[1]+'\n',assetInfo[3]+'\n']:
                file.writelines(line) 
            file.close()
            hou.ui.displayMessage('Tutorial saved at '+tutoDir)
            ]]></script>
  </tool>

  <tool name="NS_increment" label="Increment" icon="hicon:/SVGIcons.index?BUTTONS_multi_insertbefore.svg">
    <script scriptType="python"><![CDATA[import houdini.save_version as save_version
reload(save_version)
save_version.run()

#hou.hipFile.saveAndIncrementFileName()
#bug possible when filename doesnt have number]]></script>
  </tool>

  <tool name="NS_file_explorer" label="Explorer" icon="hicon:/SVGIcons.index?BUTTONS_folder.svg">
    <script scriptType="python"><![CDATA[import houdini.explore as explore_tool
#reload(houdini.explore)
explore_tool.explore()

]]></script>
  </tool>

  <tool name="NS_next_task" label="Next Task" icon="hicon:/SVGIcons.index?BUTTONS_move_to_right.svg">
    <script scriptType="python"><![CDATA[import houdini.next_step as next_step_tool
reload(next_step_tool)

#todo : next_step_tool as "step" module and you can go step.next() or step.last()
reload(next_step_tool)
message = "task name"
result = hou.ui.readMultiInput(message,('Task', 'Subtask'), buttons=('ok', 'cancel'))
if result[0]==0:
    step_name = result[1][0]
    substep_name = result[1][1]
    next_step_tool.next(step_name, substep_name)
#inputUser = hou.ui.readMultiInput(message,('Asset Name','Asset Type', 'Task', 'Subtask'), buttons=('Cancel','OK'), default_choice=1, initial_contents=(assetName, assetType, assetTask, assetSubtask)) 


"""
todo : 
    publish : for all displayed geo, go to the displayed node and cache it
"""]]></script>
  </tool>

  <toolshelf name="NS_pipeline" label="NSPipeline">
    <memberTool name="NS_save_as_HDA"/>
    <memberTool name="NS_save_as_tutorial"/>
    <memberTool name="NS_increment"/>
    <memberTool name="NS_file_explorer"/>
    <memberTool name="NS_next_task"/>
    <memberTool name="NS_pull_cache"/>
    <memberTool name="NS_save_as_asset"/>
    <memberTool name="NS_set_project"/>
    <memberTool name="generate_flipbook"/>
    <memberTool name="save_version"/>
  </toolshelf>

  <tool name="NS_pull_cache" label="Pull Cache" icon="hicon:/SVGIcons.index?BUTTONS_download.svg">
    <script scriptType="python"><![CDATA[import houdini.pull_cache as pull_cache_tool
reload(pull_cache_tool )
pull_cache_tool.run()]]></script>
  </tool>

  <tool name="NS_save_as_asset" label="Save As Asset" icon="hicon:/SVGIcons.index?BUTTONS_match_scale.svg">
    <script scriptType="python"><![CDATA[import houdini.save_as_asset as asset
from importlib import reload
reload(asset)
asset.run()

]]></script>
  </tool>

  <tool name="NS_set_project" label="Set Project" icon="hicon:/SVGIcons.index?BUTTONS_environment.svg">
    <script scriptType="python"><![CDATA[import houdini.project_manager as project
reload(project)
project.set_project()

]]></script>
  </tool>

  <shelfSetEdit name="shelf_set_1" fileLocation="C:/PROGRA~1/SIDEEF~1/HOUDIN~1.460/houdini/toolbar/ShelfDefinitions.shelf">
    <addMemberToolshelf name="labs_toolset" inPosition="17"/>
    <addMemberToolshelf name="Pipeline" inPosition="0"/>
  </shelfSetEdit>
</shelfDocument>
